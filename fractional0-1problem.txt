Dynamic Programming  -

def knapsack(value, weight, capacity):
    """Return the maximum value of items that doesn't exceed capacity. value[i] is the value of item i and weight[i] is the weight of item i for 1 <= i <= n where n is the number of items. capacity is the maximum weight. """
    n = len(value) - 1
     # m[i][w] will store the maximum value that can be attained with a maximum
    # capacity of w and using only the first i items
    m = [[-1]*(capacity + 1) for _ in range(n + 1)]
    for w in range(capacity + 1):
        m[0][w] = 0
        for i in range(1, n + 1):
            for w in range(capacity + 1):
                if weight[i] > w:
                    m[i][w] = m[i - 1][w]
                else:
                    m[i][w] = max(m[i - 1][w - weight[i]] + value[i], 
                                m[i - 1][w])
 
    return m[n][capacity]
 
n = int(input('Enter number of items: '))
value = input('Enter the values of the {} item(s) in order: '
              .format(n)).split()
value = [int(v) for v in value]
value.insert(0, None) # so that the value of the ith item is at value[i]
weight = input('Enter the positive weights of the {} item(s) in order: '
               .format(n)).split()
weight = [int(w) for w in weight]
weight.insert(0, None) # so that the weight of the ith item is at weight[i]
capacity = int(input('Enter maximum weight: '))
 
ans = knapsack(value, weight, capacity)
print('The maximum value of items that can be carried:', ans)


Branch and bound -

n = int(input('Enter Items :'))
W = int(input('Enter Capacity of knapsack :'))
p=int(input("Profit :"))
n1=list(map(int, input("Profit for each item :").strip().split()))
print(n1)
w = int(input('Weight :'))
w1=list(map(int,input("Weight for each item :").strip().split()))
print(w1)
p_per_weight = int(input('Price :'))
p1=list(map(int,input("Price per Weight :").strip().split()))
print(p1)

class Priority_Queue:
    def __init__(self):
        self.pqueue = []
        self.length = 0
    
    def insert(self, node):
        for i in self.pqueue:
            get_bound(i)
        i = 0
        while i < len(self.pqueue):
            if self.pqueue[i].bound > node.bound:
                break
            i+=1
        self.pqueue.insert(i,node)
        self.length += 1

    def print_pqueue(self):
        for i in list(range(len(self.pqueue))):
            print ("pqueue",i, "=", self.pqueue[i].bound)
                    
    def remove(self):
        try:
            result = self.pqueue.pop()
            self.length -= 1
        except: 
            print("Priority queue is empty, cannot pop from empty list.")
        else:
            return result
        
class Node:
    def __init__(self, level, profit, weight):
        self.level = level
        self.profit = profit
        self.weight = weight
        self.items = []
        
            
def get_bound(node):
    if node.weight >= W:
        return 0
    else:
        result = node.profit
        j = node.level + 1
        totweight = node.weight
        while j <= n-1 and totweight + w1[j] <= W:
            totweight = totweight + w1[j]
            result = result + n1[j]
            j+=1
        k = j
        if k<=n-1:
            result = result + (W - totweight) * p1[k]
        return result


nodes_generated = 0
pq = Priority_Queue()

v = Node(-1, 0, 0) # v initialized to be the root with level = 0, profit = $0, weight = 0
nodes_generated+=1
maxprofit = 0 # maxprofit initialized to $0
v.bound = get_bound(v)
#print("v.bound = ", v.bound)


pq.insert(v)

while pq.length != 0:
    
    v = pq.remove() #remove node with best bound
#    print("\nNode removed from pq.")
#    print("Priority Queue: ") 
#    pq.print_pqueue()
    
#    print("\nmaxprofit = ", maxprofit)
#    print("Parent Node: ")
#    print("v.level = ", v.level, "v.profit = ", v.profit, "v.weight = ", v.weight, "v.bound = ", v.bound, "v.items = ", v.items)

    if v.bound > maxprofit: #check if node is still promising
        #set u to the child that includes the next item
        u = Node(0, 0, 0)
        nodes_generated+=1
        u.level = v.level + 1
        u.profit = v.profit + n1[u.level]
        u.weight = v.weight + w1[u.level]
        #take v's list and add u's list
        u.items = v.items.copy()
        u.items.append(u.level) # adds next item
#        print("child that includes the next item: ")
#        print("Child 1:")
#        print("u.level = ", u.level, "u.profit = ", u.profit, "u.weight = ", u.weight)
#        print("u.items = ", u.items)
        if u.weight <= W and u.profit > maxprofit: 
            #update maxprofit
            maxprofit = u.profit
#            print("\nmaxprofit updated = ", maxprofit)
            bestitems = u.items
#            print("bestitems = ", bestitems)
        u.bound = get_bound(u)
#        print("u.bound = ", u.bound)
        if u.bound > maxprofit:
            pq.insert(u)
#            print("Node u1 inserted into pq.")
#            print("Priority Queue : ") 
#            pq.print_pqueue()
        #set u to the child that does not include the next item
        u2 = Node(u.level, v.profit, v.weight)
        nodes_generated+=1
        u2.bound = get_bound(u2)
        u2.items = v.items.copy()
#        print("child that doesn't include the next item: ")
#        print("Child 2:")
#        print("u2.level = ", u2.level, "u2.profit = ", u2.profit, "u2.weight = ", u2.weight, "u2.bound = ", u2.bound)
#        print("u2.items = ", u2.items)
        if u2.bound > maxprofit:
            pq.insert(u2)
#            print("Node u2 inserted into pq.")
#            print("Priority Queue : ") 
#            pq.print_pqueue()

print("\nEND maxprofit = ", maxprofit, "nodes generated = ", nodes_generated)
print("bestitems = ", bestitems)
